import asyncio
import sqlite3
import re
from datetime import datetime, timedelta
from mcstatus import JavaServer
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import matplotlib
import matplotlib.pyplot as plt
import io

matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
TOKEN = ""
DATABASE_NAME = "server_stats.db"

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# def init_db():
#     conn = sqlite3.connect(DATABASE_NAME)
#     c = conn.cursor()
#     c.execute('''CREATE TABLE IF NOT EXISTS server_stats
#                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
#                   timestamp DATETIME NOT NULL,
#                   players_online INTEGER NOT NULL)''')
#     conn.commit()
#     conn.close()

# # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É ping_stats, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# def migrate_db():
#     conn = sqlite3.connect(DATABASE_NAME)
#     c = conn.cursor()
#     c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='ping_stats'")
#     if c.fetchone() is None:
#         c.execute('''CREATE TABLE ping_stats
#                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
#                       timestamp DATETIME NOT NULL,
#                       success INTEGER NOT NULL)''')
#         conn.commit()
#         print("–¢–∞–±–ª–∏—Ü–∞ ping_stats —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
#     conn.close()

# init_db()
# migrate_db()


async def update_server_stats():
    while True:
        try:
            server = JavaServer.lookup("mc.forcemine.net")
            status = await server.async_status()

            conn = sqlite3.connect(DATABASE_NAME)
            c = conn.cursor()
            c.execute("INSERT INTO server_stats (timestamp, players_online) VALUES (?, ?)",
                (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), status.players.online))
            # –§–∏–∫—Å–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥
            c.execute("INSERT INTO ping_stats (timestamp, success) VALUES (?, ?)",
                (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 1))
            conn.commit()
            conn.close()

            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            try:
                conn = sqlite3.connect(DATABASE_NAME)
                c = conn.cursor()
                # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–∏–Ω–≥
                c.execute(
                    "INSERT INTO ping_stats (timestamp, success) VALUES (?, ?)",
                    (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 0)
                )
                conn.commit()
                conn.close()
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∏–Ω–≥–∞: {ex}")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

def get_average_online(hours):
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    time_threshold = (datetime.now() - timedelta(hours=hours)).strftime("%Y-%m-%d %H:%M:%S")

    c.execute("SELECT AVG(players_online) FROM server_stats WHERE timestamp >= ?",
        (time_threshold,))
    result = c.fetchone()[0]
    conn.close()

    return round(result, 2) if result else 0.0

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    periods = {f"{h} —á–∞—Å{'–∞' if h in {1, 2, 24} else '–æ–≤'}": h for h in range(1, 25)}
    periods.update({f"{d} –¥–Ω–µ–π": d * 24 for d in [3, 7, 14, 30]})

    try:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞:\n"
        for name, hours in periods.items():
            avg = get_average_online(hours)
            avg_div = round(avg / 4.5, 2)
            stats_text += f"‚Ä¢ {name}: {avg} ({avg_div}) –∏–≥—Ä–æ–∫–æ–≤\n"

        await update.message.reply_text(stats_text)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if not args:
            hours = 24
        else:
            try:
                hours = int(args[0])

                if hours <= 0:
                    raise ValueError

            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /graph 24)")
                return

        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        time_threshold = (datetime.now() - timedelta(hours=hours)).strftime("%Y-%m-%d %H:%M:%S")
        c.execute("SELECT timestamp, players_online FROM server_stats WHERE timestamp >= ? ORDER BY timestamp",
            (time_threshold,))
        data = c.fetchall()
        conn.close()

        if not data:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return

        timestamps = [datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") for row in data]
        players_online = [row[1] / 4.5 for row in data]  # –î–µ–ª–∏–º –æ–Ω–ª–∞–π–Ω –Ω–∞ 4.5

        plt.figure(figsize=(12, 6))
        plt.plot(timestamps, players_online, marker='o', linestyle='-', markersize=4, linewidth=1)
        plt.title(f'–û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ (–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–∞ 4.5)')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω (√∑ 4.5)')
        plt.grid(True)
        plt.xticks(rotation=45)
        #plt.xticks(rotation=55)
        #plt.xticks(rotation=35)
        plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%H:%M'))
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150)
        #plt.savefig(buf, format='png', dpi=170)
        #plt.savefig(buf, format='png', dpi=120)
        buf.seek(0)
        plt.close()

        await update.message.reply_photo(photo=buf,caption=f'üìä –û–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ (–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–∞ 4.5)')
        buf.close()

    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
    )

def get_stats_data(hours):
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    now = datetime.now()
    yesterday = now - timedelta(hours=hours)
    
    c.execute(
        """SELECT players_online, timestamp 
        FROM server_stats 
        WHERE timestamp BETWEEN ? AND ? 
        ORDER BY ABS(strftime('%s', timestamp) - strftime('%s', ?)) 
        LIMIT 1""",
        (yesterday - timedelta(minutes=30), yesterday + timedelta(minutes=30), yesterday))
    last_day_data = c.fetchone()
    
    c.execute("SELECT AVG(players_online) FROM server_stats WHERE timestamp >= ?",(yesterday,))
    avg_day = c.fetchone()[0]

    c.execute("SELECT MAX(players_online) FROM server_stats WHERE timestamp >= ?",(yesterday,))
    max_day = c.fetchone()[0]
    
    c.execute("SELECT MAX(players_online) FROM server_stats")
    max_all = c.fetchone()[0]
    
    conn.close()
    
    return {
        'last_day': last_day_data,
        'avg_day': round(avg_day, 2) if avg_day else 0,
        'max_day': max_day if max_day else 0,
        'max_all': max_all if max_all else 0
    }

async def statsserver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()

        # –¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω
        c.execute("SELECT players_online, timestamp FROM server_stats ORDER BY timestamp DESC LIMIT 1")
        current_row = c.fetchone()
        current_online = current_row[0] if current_row else 0

        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        stats_data = get_stats_data(24)
        online_24h = stats_data['last_day'][0] if stats_data['last_day'] else 0
        avg_online = stats_data['avg_day']
        max_online_day = stats_data['max_day']
        max_online_all = stats_data['max_all']

        # –ü–∏–Ω–≥-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        time_threshold = (datetime.now() - timedelta(hours=24)).strftime("%Y-%m-%d %H:%M:%S")
        c.execute("SELECT COUNT(*) FROM ping_stats WHERE timestamp >= ? AND success = 0", (time_threshold,))
        failed_pings = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM ping_stats WHERE timestamp >= ?", (time_threshold,))
        total_pings = c.fetchone()[0]
        uptime_percentage = 0.0

        if total_pings > 0:
            uptime_percentage = 100 * (total_pings - failed_pings) / total_pings

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–∞–¥–µ–Ω–∏—è–º–∏
        c.execute("SELECT timestamp FROM ping_stats WHERE success = 0 ORDER BY timestamp")
        failure_rows = c.fetchall()
        failure_times = [datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") for row in failure_rows]
        max_gap = timedelta(0)

        if failure_times:
            for i in range(1, len(failure_times)):
                gap = failure_times[i] - failure_times[i-1]

                if gap > max_gap:
                    max_gap = gap

            current_gap = datetime.now() - failure_times[-1]

            if current_gap > max_gap:
                max_gap = current_gap
        else:
            max_gap = timedelta(0)

        if failure_times:
            current_uptime = datetime.now() - failure_times[-1]
        else:
            current_uptime = timedelta(0)

        conn.close()

        def format_timedelta(td):
            days = td.days
            hours, remainder = divmod(td.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            return f"{days}d {hours}h {minutes}m {seconds}s"

        server = JavaServer.lookup("mc.forcemine.net")
        status = await server.async_status()

        online_original = status.players.online
        max_original = status.players.max
        online_divided = round(online_original / 4.5, 2)
        max_divided = round(max_original / 4.5, 2)

        def clean_mc_formatting(text):
            return re.sub(r'¬ß.', '', str(text)).strip()

        response = (
            f"üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω!\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {clean_mc_formatting(status.description)}\n"
            f"üë• –ò–≥—Ä–æ–∫–∏: {online_original} ({online_divided})/{max_original} ({max_divided})\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: {clean_mc_formatting(status.version.name)}\n"
            f"‚è± –ü–∏–Ω–≥: {round(status.latency, 2)} –º—Å"
        )


        response = (
            f"üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω!\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {clean_mc_formatting(status.description)}\n"
            f"üë• –ò–≥—Ä–æ–∫–∏: {online_original} ({int(online_divided)})/{max_original} ({int(max_divided)})\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: {clean_mc_formatting(status.version.name)}\n"
            f"‚è± –ü–∏–Ω–≥: {round(status.latency, 2)} –º—Å\n"
            f"\n"
            f"–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω: {current_online} ({round(current_online/4.5,0)})\n"
            f"–û–Ω–ª–∞–π–Ω —Å—É—Ç–∫–∏ –Ω–∞–∑–∞–¥ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è: {online_24h} ({round(online_24h/4.5,0)})\n"
            f"–°—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∑–∞ —Å—É—Ç–∫–∏: {avg_online} ({round(avg_online/4.5,0)})\n"
            f"–†–µ–∫–æ—Ä–¥ –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {max_online_day} ({round(max_online_day/4.5,0)})\n"
            f"–†–µ–∫–æ—Ä–¥ –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {max_online_all} ({round(max_online_all/4.5,0)})\n"
            f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ –∑–∞ —Å—É—Ç–∫–∏: {failed_pings} (–∞–ø—Ç–∞–π–º: {uptime_percentage:.3f}%)\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–∞–¥–µ–Ω–∏—è–º–∏: {format_timedelta(max_gap)}\n"
            f"–¢–µ–∫—É—â–∏–π –∞–ø—Ç–∞–π–º: {format_timedelta(current_uptime)}"
        )

        await update.message.reply_text(f"```\n{response}\n```", parse_mode='MarkdownV2')

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/status - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω–ª–∞–π–Ω –¥–µ–ª—ë–Ω –Ω–∞ 4.5 –≤ —Å–∫–æ–±–∫–∞—Ö)\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n"
        "/graph [—á–∞—Å–æ–≤] - –ì—Ä–∞—Ñ–∏–∫ –æ–Ω–ª–∞–π–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ [—á–∞—Å–æ–≤] —á–∞—Å–æ–≤ (–æ–Ω–ª–∞–π–Ω –¥–µ–ª—ë–Ω –Ω–∞ 4.5)\n"
        "/statsserver - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await update.message.reply_text(help_text)

async def main():
    application = Application.builder().token(TOKEN).build()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    asyncio.create_task(update_server_stats())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("graph", graph))
    application.add_handler(CommandHandler("statsserver", statsserver))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))

    application.add_handler(CommandHandler("g", graph))
    application.add_handler(CommandHandler("ss", statsserver))
    application.add_handler(CommandHandler("s", stats))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        await asyncio.sleep(3600)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª)
    await application.updater.stop()
    await application.stop()
    await application.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
