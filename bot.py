import asyncio
import sqlite3
import re
from datetime import datetime, timedelta
from mcstatus import JavaServer
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import matplotlib
import matplotlib.pyplot as plt
import io


matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
TOKEN = ""
DATABASE_NAME = "server_stats.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS server_stats
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  timestamp DATETIME NOT NULL,
                  players_online INTEGER NOT NULL)''')
    conn.commit()
    conn.close()

init_db()

async def update_server_stats():
    while True:
        try:
            server = JavaServer.lookup("mc.forcemine.net")
            status = await server.async_status()
            
            conn = sqlite3.connect(DATABASE_NAME)
            c = conn.cursor()
            c.execute(
                "INSERT INTO server_stats (timestamp, players_online) VALUES (?, ?)",
                (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), status.players.online)
            )
            conn.commit()
            conn.close()
            
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    )

def clean_mc_formatting(text):
    return re.sub(r'¬ß.', '', str(text)).strip()

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        server = JavaServer.lookup("mc.forcemine.net")
        status = await server.async_status()
        
        response = (
            f"üü¢ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω!\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {clean_mc_formatting(status.description)}\n"
            f"üë• –ò–≥—Ä–æ–∫–∏: {status.players.online}/{status.players.max}\n"
            f"üì¶ –í–µ—Ä—Å–∏—è: {clean_mc_formatting(status.version.name)}\n"
            f"‚è± –ü–∏–Ω–≥: {round(status.latency, 2)} –º—Å"
        )
        
        await update.message.reply_text(f"```\n{response}\n```", parse_mode='MarkdownV2')
        
    except Exception as e:
        await update.message.reply_text(f"üî¥ –û—à–∏–±–∫–∞: {str(e)}")

def get_average_online(hours):
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    time_threshold = (datetime.now() - timedelta(hours=hours)).strftime("%Y-%m-%d %H:%M:%S")
    
    c.execute(
        "SELECT AVG(players_online) FROM server_stats WHERE timestamp >= ?",
        (time_threshold,)
    )
    result = c.fetchone()[0]
    conn.close()
    return round(result, 2) if result else 0.0

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    periods = {
        '1 —á–∞—Å': 1,
        '2 —á–∞—Å–∞': 2,
        '3 —á–∞—Å–æ–≤': 3,
        '4 —á–∞—Å–æ–≤': 4,
        '5 —á–∞—Å–æ–≤': 5,
        '6 —á–∞—Å–æ–≤': 6,
        '7 —á–∞—Å–æ–≤': 7,
        '8 —á–∞—Å–æ–≤': 8,
        '9 —á–∞—Å–æ–≤': 9,
        '10 —á–∞—Å–æ–≤': 10,
        '11 —á–∞—Å–æ–≤': 11,
        '12 —á–∞—Å–æ–≤': 12,
        '13 —á–∞—Å–æ–≤': 13,
        '14 —á–∞—Å–æ–≤': 14,
        '15 —á–∞—Å–æ–≤': 15,
        '16 —á–∞—Å–æ–≤': 16,
        '17 —á–∞—Å–æ–≤': 17,
        '18 —á–∞—Å–æ–≤': 18,
        '19 —á–∞—Å–æ–≤': 19,
        '20 —á–∞—Å–æ–≤': 20,
        '21 —á–∞—Å–æ–≤': 21,
        '22 —á–∞—Å–æ–≤': 22,
        '23 —á–∞—Å–æ–≤': 23,
        '24 —á–∞—Å–∞': 24,
        '12 —á–∞—Å–æ–≤': 12,
        '24 —á–∞—Å–∞': 24,
        '3 –¥–Ω—è': 72,
        '7 –¥–Ω–µ–π': 168,
        '14 –¥–Ω–µ–π': 336,
        '30 –¥–Ω–µ–π': 720
    }
    
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω–∞:\n"
    try:
        for name, hours in periods.items():
            avg = get_average_online(hours)
            stats_text += f"‚Ä¢ {name}: {avg} –∏–≥—Ä–æ–∫–æ–≤\n"
            
        await update.message.reply_text(stats_text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
        args = context.args
        if not args:
            hours = 24
        else:
            try:
                hours = int(args[0])
                if hours <= 0:
                    raise ValueError
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /graph 24)")
                return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        time_threshold = (datetime.now() - timedelta(hours=hours)).strftime("%Y-%m-%d %H:%M:%S")
        c.execute(
            "SELECT timestamp, players_online FROM server_stats WHERE timestamp >= ? ORDER BY timestamp",
            (time_threshold,)
        )
        data = c.fetchall()
        conn.close()

        if not data:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        timestamps = [datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S") for row in data]
        players_online = [row[1] for row in data]

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(12, 6))
        plt.plot(timestamps, players_online, marker='o', linestyle='-', markersize=4, linewidth=1)
        plt.title(f'–û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150)
        buf.seek(0)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await update.message.reply_photo(
            photo=buf,
            caption=f'üìä –û–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤'
        )
        buf.close()

    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
def get_stats_data(hours):
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –≤—Ä–µ–º—è —Å—É—Ç–∫–∏ –Ω–∞–∑–∞–¥
    now = datetime.now()
    yesterday = now - timedelta(hours=hours)
    
    # –û–Ω–ª–∞–π–Ω 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    c.execute(
        """SELECT players_online, timestamp 
        FROM server_stats 
        WHERE timestamp BETWEEN ? AND ? 
        ORDER BY ABS(strftime('%s', timestamp) - strftime('%s', ?)) 
        LIMIT 1""",
        (yesterday - timedelta(minutes=30), yesterday + timedelta(minutes=30), yesterday))
    last_day_data = c.fetchone()
    
    # –°—Ä–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω –∑–∞ —Å—É—Ç–∫–∏
    c.execute(
        "SELECT AVG(players_online) FROM server_stats WHERE timestamp >= ?",
        (yesterday,))
    avg_day = c.fetchone()[0]
    
    # –†–µ–∫–æ—Ä–¥ –∑–∞ —Å—É—Ç–∫–∏
    c.execute(
        "SELECT MAX(players_online) FROM server_stats WHERE timestamp >= ?",
        (yesterday,))
    max_day = c.fetchone()[0]
    
    # –†–µ–∫–æ—Ä–¥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    c.execute("SELECT MAX(players_online) FROM server_stats")
    max_all = c.fetchone()[0]
    
    conn.close()
    
    return {
        'last_day': last_day_data,
        'avg_day': round(avg_day, 2) if avg_day else 0,
        'max_day': max_day if max_day else 0,
        'max_all': max_all if max_all else 0
    }

async def main():
    application = Application.builder().token(TOKEN).build()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(update_server_stats())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("graph", graph))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(3600)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await application.updater.stop()
    await application.stop()
    await application.shutdown()

if __name__ == "__main__":
    asyncio.run(main())