Цель проекта
Разработать Telegram-бота для мониторинга онлайн-статистики Minecraft-сервера с возможностью отображения данных в текстовом и графическом виде.

Задачи и подзадачи
1. Реализация механизма сбора данных о состоянии сервера
1.1. Подключение к серверу Minecraft с использованием mcstatus
Установить библиотеку mcstatus
Настроить получение статуса сервера с указанием IP-адреса
1.2. Запись данных в базу данных SQLite
Открытие соединения с базой данных
Запись текущего времени и количества игроков онлайн
Фиксация успешных и неуспешных пингов в отдельной таблице
1.3. Обработка ошибок при получении статуса
Логирование ошибок
Повторный опрос через 5 минут в случае ошибки
2. Подготовка базы данных
2.1. Создание структуры базы данных
Создать таблицу server_stats для хранения данных об онлайне игроков
Создать таблицу ping_stats для хранения данных о пингах
2.2. Миграции базы данных
Проверка существования таблиц при запуске
Добавление недостающих таблиц и колонок при необходимости
3. Реализация текстовых команд Telegram-бота
3.1. /start — приветственное сообщение
Отправить приветственное сообщение с инструкцией по использованию бота
3.2. /help — список команд
Вывести список доступных команд и их описание
3.3. /stats — отображение статистики онлайна
Получить средний онлайн за разные временные интервалы
Подсчитать делённое значение онлайна (÷ 4.5)
Отправить пользователю текстовое сообщение с результатами
3.4. /statsserver — расширенная статистика сервера
Получить данные о среднем, максимальном и текущем онлайне
Подсчитать аптайм сервера
Вычислить максимальное время между падениями сервера
Отправить пользователю текстовое сообщение с полными данными
4. Реализация графических команд Telegram-бота
4.1. /graph — построение графика онлайна
Получить данные о количестве игроков за заданное количество часов
Построить график с помощью matplotlib
Сохранить график в формате изображения
Отправить график пользователю
5. Подключение Telegram API
5.1. Инициализация Telegram-бота с использованием python-telegram-bot
Настройка токена
Регистрация обработчиков команд
5.2. Обработка текстовых команд
Установка обработчиков на команды /start, /help, /stats, /statsserver, /graph
5.3. Асинхронная работа с Telegram API
Запуск бота в асинхронном режиме
Поддержка нескольких параллельных задач
6. Оптимизация и обработка ошибок
6.1. Обработка ошибок в Telegram API
Логирование ошибок
Автоматическая перезагрузка в случае сбоя
6.2. Устойчивость базы данных
Обеспечение корректного закрытия соединения с базой данных
Проверка успешности транзакций
Результат:
Автоматическое обновление данных о сервере каждые 30 минут
Сохранение данных в базе данных
Отображение текстовой статистики и графиков через Telegram-бота
Подсчёт аптайма и автоматическая обработка ошибок
